import random
import difflib

# Stocke les questions d√©j√† pos√©es
last_questions = set()

# R√©ponses g√©n√©riques
fallback_messages = [
    "D√©sol√©, je n'ai pas compris votre question. Pouvez-vous la reformuler ?",
    "Je ne trouve aucune correspondance √† votre demande. Essayez des mots comme ‚Äòprogramme‚Äô, ‚Äòhoraire‚Äô, ‚Äòenfants‚Äô ou ‚Äòinvit√©s‚Äô.",
    "Votre question semble hors du sujet de la foire. Je peux vous aider avec les horaires, les √©v√©nements ou les stands.",
    "D√©sol√©, aucune correspondance √† votre question. Essayez d‚Äô√™tre plus pr√©cis.",
]

# Dictionnaire de r√©ponses contextuelles
faq_fallbacks = {
    "horaire": "Les horaires varient selon les jours. Consultez la section Programme pour plus de d√©tails.",
    "lieu": "Les √©v√©nements ont lieu dans plusieurs halls et salles de la Maison de la Foire.",
    "enfant": "Un espace d√©di√© aux enfants propose diverses animations et spectacles.",
    "√©diteur": "Une carte des √©diteurs est disponible dans la section d√©di√©e.",
    "livre": "Des auteurs tunisiens et √©trangers y pr√©sentent leurs ≈ìuvres.",
    "invit√©": "De nombreux invit√©s seront pr√©sents pour d√©dicacer leurs livres."
}

def fallback_response(user_input, previous_questions=None):
    question = user_input.lower()
    print("[ü§∑] Fallback activ√© pour :", user_input)

    # Recherche par mot-cl√© direct
    for mot_cle, reponse in faq_fallbacks.items():
        if mot_cle in question:
            return {"answer": reponse}

    # Recherche par similarit√© (tol√©rance si l‚Äôutilisateur √©crit "enfants" au lieu de "enfant", etc.)
    for mot_cle in faq_fallbacks:
        ratio = difflib.SequenceMatcher(None, question, mot_cle).ratio()
        if ratio > 0.75:
            return {"answer": faq_fallbacks[mot_cle]}

    # R√©ponse al√©atoire g√©n√©rique
    return {"answer": random.choice(fallback_messages)}
