"""
faq_retrieval.py
Module pour r√©cup√©rer des r√©ponses depuis la FAQ.
‚öôÔ∏è 100 % local ‚Äì ne d√©pend plus d‚ÄôOpenAI ni de LangChain.
"""

import re
import unicodedata
from text_corrector import corriger_texte  # Corrige le texte selon le mode (brief/detailed)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üåç Base FAQ multilingue avec synonymes
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FAQ_DATABASE = {
    "horaires": ["horaires", "heures", "ouverture", "fermeture", "hours", "schedule", "opening", "closing"],
    "billets": ["billets", "ticket", "entr√©e", "pass", "tickets", "entry", "pass"],
    "lieu": ["lieu", "stand", "salle", "hall", "emplacement", "place", "location", "where"],
    "paiement": ["paiement", "payer", "carte", "paypal", "cash", "esp√®ces", "payment", "credit card"],
}

FAQ_RESPONSES = {
    "horaires": {
        "fr": "‚è∞ La foire est ouverte tous les jours de 9h √† 19h.",
        "en": "‚è∞ The fair is open daily from 9 AM to 7 PM.",
    },
    "billets": {
        "fr": "üéüÔ∏è Les billets peuvent √™tre achet√©s en ligne ou √† l‚Äôentr√©e de la foire.",
        "en": "üéüÔ∏è Tickets can be purchased online or at the entrance.",
    },
    "lieu": {
        "fr": "üìç L‚Äô√©v√©nement se d√©roule au Parc des Expositions du Kram, √† Tunis.",
        "en": "üìç The event takes place at the Kram Exhibition Center in Tunis.",
    },
    "paiement": {
        "fr": "üí≥ Les paiements sont accept√©s par carte, PayPal ou en esp√®ces.",
        "en": "üí≥ Payments are accepted by credit card, PayPal, or cash.",
    },
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîß Nettoyage du texte pour comparaison
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def nettoyer_texte(text: str) -> str:
    """Nettoie et normalise le texte pour la comparaison."""
    text = text.lower()
    text = ''.join(
        c for c in unicodedata.normalize('NFD', text)
        if unicodedata.category(c) != 'Mn'
    )
    text = re.sub(r"[?.!,:;]", "", text)
    return text.strip()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß© Recherche FAQ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def obtenir_response(user_question: str, lang: str = "fr") -> str | None:
    """Retourne la meilleure r√©ponse FAQ correspondant √† la question."""
    user_question = nettoyer_texte(user_question)
    lang = lang.lower().strip()

    for key, synonyms in FAQ_DATABASE.items():
        for syn in synonyms:
            if re.search(r"\b" + re.escape(syn) + r"\b", user_question):
                response_dict = FAQ_RESPONSES.get(key, {})
                return response_dict.get(lang, response_dict.get("fr", "R√©ponse indisponible."))
    return None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ü§ñ Fallback local si aucune correspondance
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def generer_reponse_locale(question: str, lang: str = "fr", response_type: str = "brief") -> str:
    """G√©n√®re une r√©ponse locale si la FAQ ne contient pas la question."""
    if lang == "en":
        if response_type == "brief":
            return "I'm not sure about that. Please ask about schedules, tickets, or locations."
        else:
            return (
                "I'm not entirely sure how to answer that. "
                "Try rephrasing your question about fair programs, exhibitors, or event details."
            )
    else:
        if response_type == "brief":
            return "Je ne suis pas s√ªr de bien comprendre. Parlez-moi des horaires, billets ou lieux."
        else:
            return (
                "Je ne suis pas certain de la r√©ponse exacte. "
                "Essayez de reformuler votre question √† propos des programmes, √©diteurs ou stands."
            )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üéØ Fonction principale √† appeler depuis app.py
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def traiter_question(user_question: str, response_type: str = "brief", lang: str = "fr") -> str:
    """
    Traite la question FAQ :
      - 1Ô∏è‚É£ Cherche dans la base locale
      - 2Ô∏è‚É£ Si rien trouv√©, utilise une r√©ponse g√©n√©rique locale
      - 3Ô∏è‚É£ Corrige et reformate le texte
    """
    if not user_question or not isinstance(user_question, str):
        return "‚ö†Ô∏è Question vide ou invalide."

    cleaned_question = re.sub(r"\s+", " ", user_question.strip().lower())

    # Recherche directe
    response = obtenir_response(cleaned_question, lang=lang)

    # Fallback local
    if not response:
        response = generer_reponse_locale(user_question, lang=lang, response_type=response_type)

    # Correction finale
    response = corriger_texte(response, mode=response_type) or response

    return response
